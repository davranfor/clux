{
  "load": [
    "PRAGMA foreign_keys = ON;",
    "CREATE TABLE IF NOT EXISTS categories (id INTEGER PRIMARY KEY, name TEXT NOT NULL UNIQUE);",
    "CREATE TABLE IF NOT EXISTS workplaces (id INTEGER PRIMARY KEY, name TEXT NOT NULL UNIQUE);",
    "CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, workplace_id INTEGER NOT NULL, category_id INTEGER NOT NULL, role INTEGER NOT NULL DEFAULT 0, hire_start DATE NOT NULL DEFAULT (DATE('now', 'localtime')), hire_end DATE, name TEXT NOT NULL UNIQUE, tin TEXT NOT NULL UNIQUE, address TEXT DEFAULT '', phone TEXT DEFAULT '', email TEXT NOT NULL UNIQUE, password TEXT NOT NULL DEFAULT '1234', token TEXT NOT NULL DEFAULT '', clock_in DATETIME, schedule TEXT NOT NULL DEFAULT '{}', tasks TEXT NOT NULL DEFAULT '{}', FOREIGN KEY (workplace_id) REFERENCES workplaces(id), FOREIGN KEY (category_id) REFERENCES categories(id));",
    "CREATE TABLE IF NOT EXISTS timelogs (id INTEGER PRIMARY KEY AUTOINCREMENT, workplace_id INTEGER NOT NULL, user_id INTEGER NOT NULL, code INTEGER NOT NULL DEFAULT 0, clock_in DATETIME NOT NULL, clock_out DATETIME NOT NULL, request TEXT, FOREIGN KEY (workplace_id) REFERENCES workplaces(id), FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE, UNIQUE(user_id, clock_in), UNIQUE(user_id, clock_out), CHECK (clock_in < clock_out));",
    "CREATE INDEX IF NOT EXISTS index_workplaces_id ON workplaces(id);",
    "CREATE INDEX IF NOT EXISTS index_users_id ON users(id);",
    "CREATE INDEX IF NOT EXISTS index_timelogs_id ON timelogs(id);",
    "CREATE INDEX IF NOT EXISTS index_timelogs_workplace_id ON timelogs(workplace_id);",
    "CREATE INDEX IF NOT EXISTS index_timelogs_user_id ON timelogs(user_id);",
    "CREATE INDEX IF NOT EXISTS index_timelogs_code ON timelogs(code);",
    "CREATE INDEX IF NOT EXISTS index_timelogs_clock_in ON timelogs(clock_in);",
    "CREATE INDEX IF NOT EXISTS index_timelogs_clock_out ON timelogs(clock_out);",
    "CREATE INDEX IF NOT EXISTS index_timelogs_request ON timelogs(request);",
    "CREATE TRIGGER IF NOT EXISTS trigger_users_clock_in AFTER UPDATE OF clock_in ON users FOR EACH ROW WHEN (NEW.clock_in IS NULL AND datetime('now', 'localtime') > datetime(OLD.clock_in, '+59 seconds')) BEGIN INSERT INTO timelogs (workplace_id, user_id, clock_in, clock_out) VALUES (NEW.workplace_id, NEW.id, strftime('%Y-%m-%d %H:%M:00', OLD.clock_in, '+30 seconds'), strftime('%Y-%m-%d %H:%M:00', datetime('now', 'localtime'), '+30 seconds')); END;"
  ],
  "session": {
    "verify": "SELECT 1 FROM users WHERE id = ? AND role = ? AND token = ?;"
  },
  "queries": {
    "GET /auth": "SELECT json_array(id, role, name, config, clock_in, strftime('%s', datetime('now', 'localtime')) - strftime('%s', clock_in)) FROM users WHERE id = session_id();",
    "POST /login": "UPDATE users SET token = new_token(id, role, token) WHERE email = :email and password = :password RETURNING 1;",
    "PATCH /logout": "UPDATE users SET token = '' WHERE id = session_id() RETURNING 1;",
    "GET /workplaces": "SELECT json_group_array(json_array(id, name)) FROM workplaces;",
    "GET /workplaces #team": "SELECT json_group_array(json_array(EXISTS(SELECT 1 FROM timelogs WHERE workplace_id = w.id AND request IS NOT NULL), w.id, w.name, (SELECT COUNT(*) FROM users WHERE workplace_id = w.id AND clock_in IS NOT NULL))) FROM workplaces w;",
    "PATCH /workplaces #clock_in": "UPDATE users SET clock_in = NULL WHERE workplace_id IN (SELECT value FROM json_each(json(:workplaces))) AND clock_in IS NOT NULL;",
    "GET /users #0": "SELECT json_object('workplaces', (SELECT json_group_array(json_array(w.id, w.name)) FROM workplaces w), 'categories', (SELECT json_group_array(json_array(c.id, c.name)) FROM categories c));",
    "GET /users/{id}": "SELECT json_object('id', u.id, 'workplace_id', u.workplace_id, 'category_id', u.category_id, 'role', u.role, 'hire_start', hire_start, 'hire_end', hire_end, 'name', u.name, 'tin', u.tin, 'address', u.address, 'phone', u.phone, 'email', u.email, 'workplaces', (SELECT json_group_array(json_array(w.id, w.name)) FROM workplaces w), 'categories', (SELECT json_group_array(json_array(c.id, c.name)) FROM categories c)) FROM users u WHERE u.id = $1;",
    "GET /users/{id} #name": "SELECT name FROM users WHERE id = $1;",
    "GET /users/{id} #schedule": "SELECT json_object('today', date('now', 'localtime'), 'name', u.name, 'schedule', u.schedule, 'workplace_id', u.workplace_id, 'workplaces', (SELECT json_group_array(json_array(w.id, w.name)) FROM workplaces w)) FROM users u WHERE u.id = $1;",
    "GET /users/{id} #tasks": "SELECT json_object('today', date('now', 'localtime'), 'name', name, 'tasks', tasks) FROM users WHERE id = $1;",
    "GET /users #workplace": "WITH session_workplace AS (SELECT workplace_id FROM users WHERE id = session_id()) SELECT json_group_array(json_array(EXISTS(SELECT 1 FROM timelogs WHERE user_id = u.id AND request IS NOT NULL), u.id, c.name,  u.name, u.clock_in)) FROM users u JOIN categories c ON u.category_id = c.id WHERE u.workplace_id = (SELECT workplace_id FROM session_workplace);",
    "GET /users/{workplace_id} #workplace": "SELECT json_group_array(json_array(EXISTS(SELECT 1 FROM timelogs WHERE user_id = u.id AND request IS NOT NULL), u.id, c.name, u.name, u.clock_in)) FROM users u JOIN categories c ON u.category_id = c.id WHERE u.workplace_id = $1;",
    "POST /users/{id}": "INSERT INTO users (id, workplace_id, category_id, role, hire_start, hire_end, name, tin, address, phone, email) VALUES ($1, :workplace_id, :category_id, :role, :hire_start, :hire_end, :name, :tin, :address, :phone, :email) RETURNING 1;",
    "PUT /users/{id}": "UPDATE users SET name = :name, tin = :tin, address = :address, phone = :phone, email = :email WHERE id = $1 RETURNING 1;",
    "PUT /users/{id} role:admin": "UPDATE users SET workplace_id = :workplace_id, category_id = :category_id, role = :role, hire_start = :hire_start, hire_end = :hire_end, name = :name, tin = :tin, address = :address, phone = :phone, email = :email WHERE id = $1 RETURNING 1;",
    "PATCH /users/{id} #clock_in": "UPDATE users SET clock_in = CASE WHEN clock_in IS NULL THEN datetime('now', 'localtime') ELSE NULL END WHERE id = $1 RETURNING json_array(clock_in);",
    "PATCH /users/{id} #schedule": "UPDATE users SET schedule = :schedule WHERE id = $1 RETURNING 1;",
    "PATCH /users/{id} #tasks": "UPDATE users SET tasks = :tasks WHERE id = $1 RETURNING 1;",
    "DELETE /users/{id}": "DELETE FROM users WHERE id = $1 RETURNING id;",
    "GET /timelogs": "SELECT json_array(w.name, u.clock_in, strftime('%s', datetime('now', 'localtime')) - strftime('%s', u.clock_in)) FROM users u JOIN workplaces w ON u.workplace_id = w.id WHERE u.id = session_id() AND u.clock_in is NOT NULL;",
    "GET /timelogs/{id}": "SELECT json_object('id', t.id, 'workplace_id', t.workplace_id, 'user_id', t.user_id, 'code', t.code, 'clock_in', t.clock_in, 'clock_out', t.clock_out, 'workplaces', (SELECT json_group_array(json_array(w.id, w.name)) FROM workplaces w)) FROM timelogs t WHERE t.id = $1;",
    "GET /timelogs/{user_id} #empty": "SELECT json_object('id', 0, 'workplace_id', u.workplace_id, 'user_id', u.id, 'code', 0, 'clock_in', date('now', 'localtime') || ' 00:00', 'clock_out', date('now', 'localtime') || ' 00:00', 'workplaces', (SELECT json_group_array(json_array(w.id, w.name)) FROM workplaces w)) FROM users u WHERE u.id = $1;",
    "GET /timelogs/{user_id} #clocking": "SELECT json_group_array(json_array(t.id, w.name, t.code, t.clock_in, t.clock_out, t.request)) FROM timelogs t JOIN workplaces w ON t.workplace_id = w.id WHERE t.user_id = $1 AND (t.request IS NOT NULL OR t.clock_in >= date('now', '-7 days'));",
    "GET /timelogs/{user_id} #absences": "SELECT json_group_array(json_array(t.id, w.name, t.code, t.clock_in, t.clock_out, t.request)) FROM timelogs t JOIN workplaces w ON t.workplace_id = w.id WHERE t.user_id = $1 AND t.code >= 5;",
    "GET /timelogs/{user_id}/{year}/{month} #month": "SELECT json_group_array(json_array(t.id, w.name, t.code, t.clock_in, t.clock_out, t.request)) FROM timelogs t JOIN workplaces w ON t.workplace_id = w.id WHERE t.user_id = $1 AND strftime('%Y', t.clock_in) = $2 AND strftime('%m', t.clock_in) = $3;",
    "GET /timelogs/{user_id} #report": "SELECT json_group_array(json_array(workplace_id, code, clock_in, clock_out)) FROM timelogs WHERE user_id = $1 AND workplace_id >= @from_workplace AND workplace_id <= @to_workplace AND ((date(clock_in) >= date(@from_date) AND date(clock_in) <= date(@to_date)) OR (date(clock_out) >= date(@from_date) AND date(clock_out) <= date(@to_date)));",
    "POST /timelogs role:basic": "INSERT INTO timelogs (workplace_id, user_id, code, clock_in, clock_out, request) SELECT :workplace_id, :user_id, :code, :clock_in, :clock_out, json_object('reason', :reason) WHERE :code >= 5 OR datetime(:clock_out) < datetime('now', 'localtime', '+60 seconds') RETURNING id;",
    "POST /timelogs role:supervisor,admin": "INSERT INTO timelogs (workplace_id, user_id, code, clock_in, clock_out) SELECT :workplace_id, :user_id, :code, :clock_in, :clock_out WHERE :code >= 5 OR datetime(:clock_out) < datetime('now', 'localtime', '+60 seconds') RETURNING id;",
    "PUT /timelogs/{id}": "UPDATE timelogs SET workplace_id = :workplace_id, code = :code, clock_in = :clock_in, clock_out = :clock_out WHERE id = $1 AND (:code >= 5 OR datetime(:clock_out) < datetime('now', 'localtime', '+60 seconds')) RETURNING id;",
    "PUT /timelogs/{id} #approve": "UPDATE timelogs SET workplace_id = COALESCE (json_extract(request, '$.workplace_id'), workplace_id), clock_in = COALESCE (json_extract(request, '$.clock_in'), clock_in), clock_out = COALESCE (json_extract(request, '$.clock_out'), clock_out), request = NULL WHERE id = $1 RETURNING 1;",
    "PUT /timelogs/{user_id} #approve_all": "UPDATE timelogs SET workplace_id = COALESCE (json_extract(request, '$.workplace_id'), workplace_id), clock_in = COALESCE (json_extract(request, '$.clock_in'), clock_in), clock_out = COALESCE (json_extract(request, '$.clock_out'), clock_out), request = NULL WHERE user_id = $1 AND request IS NOT NULL RETURNING 1;",
    "PATCH /timelogs/{id} #request content:none": "UPDATE timelogs SET request = NULL WHERE id = $1 RETURNING id;",
    "PATCH /timelogs/{id} #request": "UPDATE timelogs SET request = json_object('workplace_id', :workplace_id, 'workplace_name', :workplace_name, 'clock_in', :clock_in, 'clock_out', :clock_out, 'reason', :reason) WHERE id = $1 AND (:code >= 5 OR datetime(:clock_out) < datetime('now', 'localtime', '+60 seconds')) RETURNING id;",
    "DELETE /timelogs/{id}": "DELETE FROM timelogs WHERE id = $1 RETURNING id;"
  }
}

