{
  "load": [
    "PRAGMA foreign_keys = ON;",
    "CREATE TABLE IF NOT EXISTS categories (id INTEGER PRIMARY KEY, name TEXT NOT NULL UNIQUE);",
    "CREATE TABLE IF NOT EXISTS workplaces (id INTEGER PRIMARY KEY, name TEXT NOT NULL UNIQUE);",
    "CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, workplace_id INTEGER NOT NULL, category_id INTEGER NOT NULL, role INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL UNIQUE, tin TEXT NOT NULL UNIQUE, address TEXT DEFAULT '', phone TEXT DEFAULT '', email TEXT NOT NULL UNIQUE, password TEXT NOT NULL DEFAULT '1234', token TEXT NOT NULL DEFAULT '', clock_in DATETIME, schedule TEXT NOT NULL DEFAULT '{}', FOREIGN KEY (workplace_id) REFERENCES workplaces(id), FOREIGN KEY (category_id) REFERENCES categories(id));",
    "CREATE TABLE IF NOT EXISTS timesheet (id INTEGER PRIMARY KEY AUTOINCREMENT, workplace_id INTEGER NOT NULL, user_id INTEGER NOT NULL, code INTEGER NOT NULL DEFAULT 0, clock_in DATETIME NOT NULL, clock_out DATETIME NOT NULL, request TEXT, FOREIGN KEY (workplace_id) REFERENCES workplaces(id), FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE, UNIQUE(user_id, clock_in), UNIQUE(user_id, clock_out), CHECK (clock_in < clock_out));",
    "CREATE INDEX IF NOT EXISTS index_workplaces_id ON workplaces(id);",
    "CREATE INDEX IF NOT EXISTS index_users_id ON users(id);",
    "CREATE INDEX IF NOT EXISTS index_timesheet_id ON timesheet(id);",
    "CREATE INDEX IF NOT EXISTS index_timesheet_workplace_id ON timesheet(workplace_id);",
    "CREATE INDEX IF NOT EXISTS index_timesheet_user_id ON timesheet(user_id);",
    "CREATE INDEX IF NOT EXISTS index_timesheet_code ON timesheet(code);",
    "CREATE INDEX IF NOT EXISTS index_timesheet_clock_in ON timesheet(clock_in);",
    "CREATE INDEX IF NOT EXISTS index_timesheet_clock_out ON timesheet(clock_out);",
    "CREATE TRIGGER IF NOT EXISTS trigger_users_clock_in AFTER UPDATE OF clock_in ON users FOR EACH ROW WHEN (NEW.clock_in IS NULL) BEGIN INSERT INTO timesheet (workplace_id, user_id, clock_in, clock_out) VALUES (NEW.workplace_id, NEW.id, strftime('%Y-%m-%d %H:%M:00', OLD.clock_in, '+30 seconds'), strftime('%Y-%m-%d %H:%M:00', datetime('now', 'localtime'), '+30 seconds')); END;"
  ],
  "session": {
    "verify": "SELECT workplace_id FROM users WHERE id = ? AND role = ? AND token = ?;"
  },
  "queries": {
    "GET /auth": "SELECT json_array(id, role, name, clock_in, strftime('%s', datetime('now', 'localtime')) - strftime('%s', clock_in)) FROM users WHERE id = session_id();",
    "POST /login": "UPDATE users SET token = new_token(id, role, token) WHERE email = :email and password = :password RETURNING 1;",
    "GET /workplaces": "SELECT json_group_array(json_array(w.id, w.name, (SELECT COUNT(*) FROM users WHERE workplace_id = w.id AND clock_in IS NOT NULL))) FROM workplaces w;",
    "GET /users/0": "SELECT json_object('workplaces', (SELECT json_group_array(json_array(w.id, w.name)) FROM workplaces w), 'categories', (SELECT json_group_array(json_array(c.id, c.name)) FROM categories c));",
    "GET /users/{id}": "SELECT json_object('id', u.id, 'workplace_id', u.workplace_id, 'category_id', u.category_id, 'role', u.role, 'name', u.name, 'tin', u.tin, 'address', u.address, 'phone', u.phone, 'email', u.email, 'workplaces', (SELECT json_group_array(json_array(w.id, w.name)) FROM workplaces w), 'categories', (SELECT json_group_array(json_array(c.id, c.name)) FROM categories c)) FROM users u WHERE u.id = $1;",
    "GET /users/{id}/schedule": "SELECT json_object('today', date('now', 'localtime'), 'name', u.name, 'schedule', u.schedule, 'workplace_id', u.workplace_id, 'workplaces', (SELECT json_group_array(json_array(w.id, w.name)) FROM workplaces w)) FROM users u WHERE u.id = $1;",
    "GET /users/workplace": "SELECT json_group_array(json_array(u.id, c.name, u.name, u.clock_in)) FROM users u JOIN categories c ON u.category_id = c.id WHERE u.workplace_id = workplace_id();",
    "GET /users/{id}/workplace": "SELECT json_group_array(json_array(u.id, c.name, u.name, u.clock_in)) FROM users u JOIN categories c ON u.category_id = c.id WHERE u.workplace_id = $1;",
    "POST /users/{id}": "INSERT INTO users (id, workplace_id, category_id, role, name, tin, address, phone, email) VALUES ($1, :workplace_id, :category_id, :role, :name, :tin, :address, :phone, :email) RETURNING 1;",
    "PUT /users/{id}": "UPDATE users SET name = :name, tin = :tin, address = :address, phone = :phone, email = :email WHERE id = $1 RETURNING 1;",
    "PUT /users/{id} role:admin": "UPDATE users SET workplace_id = :workplace_id, category_id = :category_id, role = :role, name = :name, tin = :tin, address = :address, phone = :phone, email = :email WHERE id = $1 RETURNING 1;",
    "PATCH /users/clock_in": "UPDATE users SET clock_in = CASE WHEN clock_in IS NULL THEN datetime('now', 'localtime') ELSE NULL END WHERE id = session_id() RETURNING json_array(clock_in);",
    "PATCH /users/{id}/schedule": "UPDATE users SET schedule = :schedule WHERE id = $1 RETURNING 1;",
    "GET /timesheet": "SELECT json_array(w.name, u.clock_in, strftime('%s', datetime('now', 'localtime')) - strftime('%s', t.clock_in)) FROM users u JOIN workplaces w ON u.workplace_id = w.id WHERE u.id = session_id() AND u.clock_in is NOT NULL;",
    "GET /timesheet/{id}": "SELECT json_object('id', t.id, 'workplace_id', t.workplace_id, 'user_id', t.user_id, 'clock_in', t.clock_in, 'clock_out', t.clock_out, 'workplaces', (SELECT json_group_array(json_array(w.id, w.name)) FROM workplaces w)) FROM timesheet t WHERE t.id = $1;",
    "GET /timesheet/empty": "SELECT json_object('id', 0, 'workplace_id', u.workplace_id, 'user_id', u.id, 'clock_in', date('now', 'localtime') || ' 00:00', 'clock_out', date('now', 'localtime') || ' 00:00', 'workplaces', (SELECT json_group_array(json_array(w.id, w.name)) FROM workplaces w)) FROM users u WHERE u.id = session_id();",
    "GET /timesheet/week": "SELECT json_group_array(json_array(t.id, w.name, t.code, t.clock_in, t.clock_out, t.request)) FROM timesheet t JOIN workplaces w ON t.workplace_id = w.id WHERE t.user_id = session_id() AND t.clock_in >= date('now', '-6 days');",
    "GET /timesheet/{year}/{month}/month": "SELECT json_group_array(json_array(t.id, w.name, t.code, t.clock_in, t.clock_out, t.request)) FROM timesheet t JOIN workplaces w ON t.workplace_id = w.id WHERE t.user_id = session_id() AND strftime('%Y', t.clock_in) = $1 AND strftime('%m', t.clock_in) = $2;",
    "POST /timesheet role:basic,supervisor": "INSERT INTO timesheet (workplace_id, user_id, clock_in, clock_out, request) SELECT :workplace_id, session_id(), :clock_in, :clock_out, json_object('reason', :reason) WHERE datetime(:clock_out) < datetime('now', 'localtime', '+60 seconds') RETURNING id;",
    "POST /timesheet role:admin": "INSERT INTO timesheet (workplace_id, user_id, clock_in, clock_out) SELECT :workplace_id, :user_id, :clock_in, :clock_out WHERE datetime(:clock_out) < datetime('now', 'localtime', '+60 seconds') RETURNING id;",
    "PUT /timesheet/{id}": "UPDATE timesheet SET workplace_id = :workplace_id, clock_in = :clock_in, clock_out = :clock_out WHERE id = $1 AND datetime(:clock_out) < datetime('now', 'localtime', '+60 seconds') RETURNING id;",
    "PATCH /timesheet/{id}/request content:none": "UPDATE timesheet SET request = NULL WHERE id = $1 RETURNING id;",
    "PATCH /timesheet/{id}/request": "UPDATE timesheet SET request = json_object('workplace_id', :workplace_id, 'workplace_name', :workplace_name, 'clock_in', :clock_in, 'clock_out', :clock_out, 'reason', :reason) WHERE id = $1 AND (workplace_id != :workplace_id OR clock_in != :clock_in OR clock_out != :clock_out) AND datetime(:clock_out) < datetime('now', 'localtime', '+60 seconds') RETURNING id;",
    "DELETE /timesheet/{id}": "DELETE FROM timesheet WHERE id = $1 RETURNING id;"
  }
}

