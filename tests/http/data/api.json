{
  "load": [
    "PRAGMA foreign_keys = ON;",
    "CREATE TABLE IF NOT EXISTS categories (id INTEGER PRIMARY KEY, name TEXT NOT NULL UNIQUE);",
    "CREATE TABLE IF NOT EXISTS workplaces (id INTEGER PRIMARY KEY, name TEXT NOT NULL UNIQUE);",
    "CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, workplace_id INTEGER NOT NULL, category_id INTEGER NOT NULL, role INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL UNIQUE, tin TEXT NOT NULL UNIQUE, address TEXT DEFAULT '', phone TEXT DEFAULT '', email TEXT NOT NULL UNIQUE, password TEXT NOT NULL, token TEXT NOT NULL DEFAULT '', schedule TEXT NOT NULL DEFAULT '{}', FOREIGN KEY (workplace_id) REFERENCES workplaces(id), FOREIGN KEY (category_id) REFERENCES categories(id));",
    "CREATE TABLE IF NOT EXISTS timesheet (id INTEGER PRIMARY KEY AUTOINCREMENT, workplace_id INTEGER NOT NULL, user_id INTEGER NOT NULL, clock_in DATETIME NOT NULL, clock_out DATETIME NOT NULL DEFAULT 0, request TEXT, FOREIGN KEY (workplace_id) REFERENCES workplaces(id), FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE, UNIQUE(user_id, clock_in), UNIQUE(user_id, clock_out), CHECK (clock_out = 0 OR clock_in < clock_out));",
    "CREATE INDEX IF NOT EXISTS idx_timesheet_id ON timesheet(id);",
    "CREATE INDEX IF NOT EXISTS idx_timesheet_workplace_id ON timesheet(workplace_id);",
    "CREATE INDEX IF NOT EXISTS idx_timesheet_user_id ON timesheet(user_id);",
    "CREATE INDEX IF NOT EXISTS idx_timesheet_clock_in ON timesheet(clock_in);",
    "CREATE INDEX IF NOT EXISTS idx_timesheet_clock_out ON timesheet(clock_out);",
    "CREATE INDEX IF NOT EXISTS idx_timesheet_user_id_clock_in ON timesheet(user_id, clock_in);",
    "CREATE INDEX IF NOT EXISTS idx_timesheet_user_id_clock_out ON timesheet(user_id, clock_out);",
    "CREATE INDEX IF NOT EXISTS idx_timesheet_user_id_clock_out_0 ON timesheet(user_id) WHERE clock_out = 0;"
  ],
  "session": {
    "verify": "SELECT workplace_id FROM users WHERE id = ? AND role = ? AND token = ?;"
  },
  "queries": {
    "GET /auth": "SELECT json_array(json_array(u.role, u.name), COALESCE((SELECT json_array(w.name, t.clock_in, strftime('%s', datetime('now', 'localtime')) - strftime('%s', t.clock_in)) FROM timesheet t JOIN workplaces w ON t.workplace_id = w.id WHERE t.user_id = u.id AND t.clock_out = 0), json_array('', 0, 0))) FROM users u WHERE u.id = session_id();",
    "POST /login": "UPDATE users SET token = new_token(id, role, token) WHERE email = :email and password = :password RETURNING 1;",
    "GET /users": "SELECT json_object('id', u.id, 'workplace_id', u.workplace_id, 'category_id', u.category_id, 'role', u.role, 'name', u.name, 'tin', u.tin, 'address', u.address, 'phone', u.phone, 'email', u.email, 'workplaces', (SELECT json_group_array(json_array(w.id, w.name)) FROM workplaces w), 'categories', (SELECT json_group_array(json_array(c.id, c.name)) FROM categories c)) FROM users u WHERE u.id = session_id();",
    "GET /users/schedule": "SELECT json_object('today', date('now', 'localtime'), 'schedule', u.schedule, 'workplace_id', u.workplace_id, 'workplaces', (SELECT json_group_array(json_array(w.id, w.name)) FROM workplaces w)) FROM users u WHERE u.id = session_id();",
    "PUT /users": "UPDATE users SET name = :name, tin = :tin, address = :address, phone = :phone, email = :email WHERE id = session_id() RETURNING 1;",
    "PUT /users role:admin": "UPDATE users SET workplace_id = :workplace_id, category_id = :category_id, role = :role, name = :name, tin = :tin, address = :address, phone = :phone, email = :email WHERE id = session_id() RETURNING 1;",
    "PATCH /users/schedule": "UPDATE users SET schedule = :schedule WHERE id = session_id() RETURNING 1;",
    "GET /timesheet": "SELECT json_array(w.name, t.clock_in, strftime('%s', datetime('now', 'localtime')) - strftime('%s', t.clock_in)) FROM timesheet t JOIN workplaces w ON t.workplace_id = w.id WHERE t.user_id = session_id() AND t.clock_out = 0;",
    "GET /timesheet/{id}": "SELECT json_object('id', t.id, 'workplace_id', t.workplace_id, 'clock_in', t.clock_in, 'clock_out', t.clock_out, 'workplaces', (SELECT json_group_array(json_array(w.id, w.name)) FROM workplaces w)) FROM timesheet t WHERE t.id = $1;",
    "GET /timesheet/empty": "SELECT json_object('id', 0, 'workplace_id', u.workplace_id, 'clock_in', date('now', 'localtime') || ' 00:00', 'clock_out', date('now', 'localtime') || ' 00:00', 'workplaces', (SELECT json_group_array(json_array(w.id, w.name)) FROM workplaces w)) FROM users u WHERE u.id = session_id();",
    "GET /timesheet/week": "SELECT json_group_array(json_array(t.id, w.name, t.clock_in, t.clock_out, t.request)) FROM timesheet t JOIN workplaces w ON t.workplace_id = w.id WHERE t.user_id = session_id() AND t.clock_out != 0 AND (date(t.clock_in) >= date('now', '-6 days') OR date(t.clock_out) >= date('now', '-6 days'));",
    "POST /timesheet content:none": "INSERT INTO timesheet (workplace_id, user_id, clock_in) VALUES (workplace_id(), session_id(), datetime('now', 'localtime')) ON CONFLICT(user_id, clock_out) DO UPDATE SET clock_in = strftime('%Y-%m-%d %H:%M:00', clock_in, '+30 seconds'), clock_out = strftime('%Y-%m-%d %H:%M:00', excluded.clock_in, '+30 seconds') WHERE timesheet.user_id = excluded.user_id AND timesheet.clock_out = 0 RETURNING json_array((SELECT name FROM workplaces WHERE id = workplace_id), clock_in, clock_out);",
    "POST /timesheet": "INSERT INTO timesheet (workplace_id, user_id, clock_in, clock_out) VALUES (:workplace_id, session_id(), :clock_in, :clock_out) RETURNING id;",
    "PUT /timesheet/{id}": "UPDATE timesheet SET workplace_id = :workplace_id, clock_in = :clock_in, clock_out = :clock_out WHERE id = $1 RETURNING id;",
    "PATCH /timesheet/{id}/request/update": "UPDATE timesheet SET request = json_object('workplace_id', :workplace_id, 'workplace_name', :workplace_name, 'clock_in', :clock_in, 'clock_out', :clock_out, 'reason', :reason) WHERE id = $1 AND (workplace_id != :workplace_id OR clock_in != :clock_in OR clock_out != :clock_out) RETURNING id;",
    "PATCH /timesheet/{id}/request/delete": "UPDATE timesheet SET request = json_object('reason', :reason) WHERE id = $1 RETURNING id;",
    "PATCH /timesheet/{id}/request/clear": "UPDATE timesheet SET request = NULL WHERE id = $1 RETURNING id;",
    "DELETE /timesheet/{id}": "DELETE FROM timesheet WHERE id = $1 RETURNING id;"
  }
}

